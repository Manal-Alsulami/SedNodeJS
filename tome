// API endpoint to fetch all users
app.get('/users', (req, res) => {
    // perform database operations such as querying tables
    // fetch all users from the 'user' table
    db.query('SELECT * FROM user', (error, results) => {
        if (error) {
            console.error('Error querying user table:', error);
            res.status(500).json({ error: 'Error querying user table' });
            return;
        }
        res.json(results);
    });
});

// API endpoint to perform user sign-up
app.post('/signup', (req, res) => {
    const { name, email, password, phone, location } = req.body;
    // Perform database insertion for user sign-up
    db.query('INSERT INTO user (name, email, password, phone, location) VALUES (?, ?, ?, ?, ?)',
        [name, email, password, phone, location],
        (err, result) => {
            if (err) {
                console.error('Error signing up user:', err);
                res.status(500).json({ error: 'Error signing up user' });
                return;
            }
            res.status(201).json({ message: 'User signed up successfully' });
        });
});

// API endpoint to perform user log-in
app.post('/login', (req, res) => {
    const { email, password } = req.body;
    // Perform database query to check user credentials
    db.query('SELECT * FROM user WHERE email = ? AND password = ?', [email, password], (err, results) => {
        if (err) {
            console.error('Error logging in:', err);
            res.status(500).json({ error: 'Error logging in' });
            return;
        }
        if (results.length === 0) {
            res.status(401).json({ error: 'Invalid email or password' });
            return;
        }
        res.status(200).json({ message: 'User logged in successfully', user: results[0] });
    });
});


// API endpoint to perform OTP verification
app.post('/verify-otp', (req, res) => {
    const { userId, otpValue } = req.body;
    // Perform database query to check OTP validity
    db.query('SELECT * FROM otps WHERE user_ID = ? AND OTP_value = ? AND is_used = 0', [userId, otpValue], (err, results) => {
        if (err) {
            console.error('Error verifying OTP:', err);
            res.status(500).json({ error: 'Error verifying OTP' });
            return;
        }
        if (results.length === 0) {
            res.status(401).json({ error: 'Invalid OTP' });
            return;
        } // 401 typically indicates that the client making the request is not authenticated. 
        // Update the OTP status to mark it as used
        db.query('UPDATE otps SET is_used = 1 WHERE OTP_ID = ?', [results[0].OTP_ID], (updateErr, updateResult) => {
            if (updateErr) {
                console.error('Error updating OTP status:', updateErr);
                res.status(500).json({ error: 'Error updating OTP status' });
                return;
            }
            res.status(200).json({ message: 'OTP verified successfully' });
        }); //200 in the context of HTTP responses indicates that the request was successful.
    });
});

// API endpoint to get plant types
app.get('/api/plant-types', (req, res) => {
    // Perform database operation to fetch plant types
    db.query('SELECT * FROM PlantType', (err, results) => {
        if (err) {
            console.error('Error querying plant types:', err);
            res.status(500).json({ error: 'Internal Server Error' });
            return;
        }
        res.status(200).json(results);
    });
});




//user
db.query('SELECT * FROM user', (error, results) => {
    if (error) {
        console.error('Error querying user table:', error);
        return;
    }
    console.log('user:', results);
});


//otps
db.query('SELECT * FROM otps', (error, results) => {
    if (error) {
        console.error('Error querying otps table:', error);
        return;
    }
    console.log('otps:', results);
});
//planttype
db.query('SELECT * FROM planttype', (error, results) => {
    if (error) {
        console.error('Error querying planttype table:', error);
        return;
    }
    console.log('planttype:', results);
});
//soilanalysis 
db.query('SELECT * FROM soilanalysis', (error, results) => {
    if (error) {
        console.error('Error querying soilanalysis table:', error);
        return;
    }
    console.log('soilanalysis:', results);
});

//plantdiagnosis
db.query('SELECT * FROM plantdiagnosis', (error, results) => {
    if (error) {
        console.error('Error querying plantdiagnosis table:', error);
        return;
    }
    console.log('plantdiagnosis:', results);
});

//cropyieldprediction
db.query('SELECT * FROM cropyieldprediction', (error, results) => {
    if (error) {
        console.error('Error querying cropyieldprediction table:', error);
        return;
    }
    console.log('cropyieldprediction:', results);
});



app.get('/api/plant-types', (req, res) => {
    db.query('SELECT * FROM planttype', (error, results) => {
        if (error) {
            console.error('Error querying planttype table:', error);
            res.status(500).json({ error: 'Internal Server Error' });
            return;
        }
        res.status(200).json(results);
    });
});


app.get('/api/users', (req, res) => {
    db.query('SELECT * FROM user', (error, results) => {
        if (error) {
            console.error('Error querying user table:', error);
            res.status(500).json({ error: 'Internal Server Error' });
            return;
        }
        res.status(200).json(results);
    });
});




































// Create a MySQL database connection
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'Manal4Manal',
    database: 'Sedrah'
});

// Connect to the database
db.connect((error) => {
    if (error) {
        console.error('Error connecting to MySQL database:', error);
    } else {
        console.log('Connected to MySQL database!');
    }
});

//routes(APIs) for database queries


//user
// API user sign up
app.post('/api/signup', (request, response) => {
    const userData = request.body; // Assuming user data is submitted in the request body

    // Execute INSERT query to store user data into 'user' table
    db.query('INSERT INTO user SET ?', userData, (error, result) => {
        if (error) {
            console.error('Error signing up:', error);
            response.status(500).json({ message: 'Error signing up' }); // 500 is response code: There was an internal error. A stack trace is provided and logged in the FusionAuth log files. The response will be empty.
            return;
        }
        response.status(200).json({ message: 'User signed up successfully' }); // 200 is response code: The request was successful. The response will contain a JSON body.
    });
});

// API to handle user login
app.post('/api/login', (request, response) => {
    const { email, password } = request.body; //email and password sent in the request body
    // Execute a SELECT query to find the user with the provided email and password
    db.query('SELECT * FROM user WHERE email = ? AND password = ?', [email, password], (error, results) => {
        if (error) {
            console.error('Error querying user table:', error);
            response.status(500).json({ error: 'Internal Server Error' }); // 500 is response code: There was an internal error. A stack trace is provided and logged in the FusionAuth log files. The response will be empty.
            return;
        }
        //to Check if any user matched the provided credentials
        if (results.length === 0) {
            response.status(401).json({ error: 'Invalid email or password' }); // 401 is response code: The request requires user authentication. The response MUST include a WWW-Authenticate header field containing a challenge applicable to the requested resource.
            return;
        }
        //User authentication successful
        response.status(200).json({ message: 'User authenticated successfully', user: results[0] }); // 200 is response code: The request was successful. The response will contain a JSON body.
    });
});

// API to handle OTP code submission
//otps
app.post('/verify-otp', (request, response) => {
    const { userId, otpValue } = request.body;
    db.query('SELECT * FROM otps WHERE user_ID = ? AND OTP_value = ? AND is_used = 0', [userId, otpValue], (error, results) => {
        if (error) {
            console.error('Error verifying OTP:', error);
            request.status(500).json({ error: 'Error verifying OTP' }); // 500 is response code: There was an internal error. A stack trace is provided and logged in the FusionAuth log files. The response will be empty.
            return;
        }
        if (results.length === 0) {
            request.status(401).json({ error: 'Invalid OTP' }); // 401 is responce code: You did not supply a valid Authorization header. The header was omitted or your API key was not valid. The response will be empty. 
            return;
        }
        db.query('UPDATE otps SET is_used = 1 WHERE OTP_ID = ?', [results[0].OTP_ID], (updateErr, updateResult) => {
            if (updateErr) {
                console.error('Error updating OTP status:', updateErr);
                response.status(500).json({ error: 'Error updating OTP status' }); // 500 is response code: // // // ...
                return;
            }
            response.status(200).json({ message: 'OTP verified successfully' });  // 200 is response code: The request was successful. The response will contain a JSON body.
        });
    });
});



// API to handle change password
app.put('/api/change-password', (request, response) => {
    // Logic for changing password
});

// API to handle edit profile
app.put('/api/edit-profile', (request, response) => {
    // Logic for editing profile
});

// API to get user profile
app.get('/api/profile', (request, response) => {
    // Logic for retrieving user profile
});

//planttype
// API to get plant types
app.get('/api/plant-type', (request, response) => {
    // Execute SELECT query to retrieve plant types from 'planttype' table
    db.query('SELECT * FROM planttype', (error, results) => {
        if (error) {
            console.error('Error retrieving plant types:', error);
            response.status(500).json({ message: 'Error retrieving plant types' });
            return;
        }
        response.status(200).json(results);
    });
});

// API to get plant type image
app.get('/api/plant-type-image', (request, response) => {
    // Logic for retrieving plant type image
});

// API to handle selection of plant type
app.post('/api/selected-plant-type', (request, response) => {
    // Logic for selecting plant type
});


//soilanalysis
app.get('/api/soil-analyses', (request, response) => {
    db.query('SELECT * FROM soilanalysis', (error, results) => {
        if (error) {
            console.error('Error querying soilanalysis table:', error);
            response.status(500).json({ error: 'Internal Server Error' });
            return;
        }
        response.status(200).json(results);
    });
});

//plantdiagnosis
app.get('/api/plant-diagnoses', (request, response) => {
    db.query('SELECT * FROM plantdiagnosis', (error, results) => {
        if (error) {
            console.error('Error querying plantdiagnosis table:', error);
            response.status(500).json({ error: 'Internal Server Error' });
            return;
        }
        res.status(200).json(results);
    });
});

//cropyieldprediction
app.get('/api/crop-yield-predictions', (request, response) => {
    db.query('SELECT * FROM cropyieldprediction', (error, results) => {
        if (error) {
            console.error('Error querying cropyieldprediction table:', error);
            response.status(500).json({ error: 'Internal Server Error' });
            return;
        }
        response.status(200).json(results);
    });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is listening at http://localhost:${PORT}`);
});

//close the database connection 
db.end();





















module.exports = function (db) {
    route.post('/signup', (request, response) => {
        // Extract user data from the request body
        const { name, email, password, phone, location } = request.body;
        //check if all required fields are provided
        if (!name || !email || !password || !phone || !location) {
            return response.status(400).json({ message: 'Please provide all required fields: name, email, password, phone, and location' });
        }
        //check if the email is already registered
        db.query('SELECT * FROM users WHERE email = ?', [email], (error, results) => {
            if (error) {
                console.error('Error checking email:', error);
                return response.status(500).json({ message: 'Error checking email:' });
            }
            if (results.length > 0) {
                return response.status(400).json({ message: 'Email is already registered' });
            }
            //insert the user data into the database
            const userData = { name, email, password, phone, location };
            db.query('INSERT INTO users SET ?', userData, (error, result) => {
                if (error) {
                    console.error('Error signing up:', error);
                    return response.status(500).json({ message: 'Error signing up' });
                }
                return response.status(200).json({ message: 'User signed up successfully' });
            });
        });
    });

    return route;
};

// Create a MySQL database connection
/**const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'Manal4Manal',
    database: 'Sedrah'
}); **/

// Connect to the database
/**db.connect((error) => {
    if (error) {
        console.error('Error connecting to MySQL database:', error);
    } else {
        console.log('Connected to MySQL database!');
    }
});**/
